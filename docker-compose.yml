services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-tools-postgres
    environment:
      POSTGRES_DB: mcp_tools
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "6110:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_tools"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-tools-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6111:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-tools-qdrant
    ports:
      - "6112:6333"
      - "6113:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # NATS Message Broker
  nats:
    image: nats:alpine
    container_name: mcp-tools-nats
    ports:
      - "6114:4222"
      - "6115:8222"  # HTTP monitoring port
    command: ["--http_port", "8222"]
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222/varz"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Database Migration Service
  migrations:
    build:
      context: .
      dockerfile: ./migrations/Dockerfile
    container_name: mcp-tools-migrations
    environment:
      NODE_ENV: production
      DATABASE_TYPE: postgresql
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: mcp_tools
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_secure_password}
      SEED_LEVEL: ${SEED_LEVEL:-essential}  # none, essential, samples, all
      FORCE_SEED: ${FORCE_SEED:-false}      # Force re-run existing seeds
    depends_on:
      postgres:
        condition: service_healthy
    restart: "no"  # Run once and exit
    healthcheck:
      test: ["CMD", "test", "-f", "/tmp/migration-complete"]
      interval: 30s
      timeout: 10s
      start_period: 5s
      retries: 3
    networks:
      - mcp-network

  # Gateway Service
  gateway:
    build:
      context: .
      dockerfile: ./gateway/Dockerfile
    container_name: mcp-tools-gateway
    environment:
      NODE_ENV: production
      PORT: 6100
      DATABASE_URL: postgresql://mcp_user:${POSTGRES_PASSWORD:-mcp_secure_password}@postgres:5432/mcp_tools
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      QDRANT_URL: http://qdrant:6333
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      KANBAN_SERVER_URL: http://kanban-server:6102
      WIKI_SERVER_URL: http://wiki-server:6103
      MEMORY_SERVER_URL: http://memory-server:6104
    ports:
      - "6100:6100"
    depends_on:
      migrations:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      kanban-server:
        condition: service_healthy
      wiki-server:
        condition: service_healthy
      memory-server:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6100/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    networks:
      - mcp-network

  # Embeddings Worker
  embeddings-worker:
    build:
      context: .
      dockerfile: ./workers/embeddings/Dockerfile
    container_name: mcp-tools-embeddings-worker
    environment:
      NODE_ENV: production
      QDRANT_URL: http://qdrant:6333
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2  # Can scale embeddings processing
    networks:
      - mcp-network

  # Markitdown Worker
  markitdown-worker:
    build:
      context: .
      dockerfile: ./workers/markitdown/Dockerfile
    environment:
      NODE_ENV: production
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      NATS_URL: nats://nats:4222
    depends_on:
      redis:
        condition: service_healthy
      nats:
        condition: service_healthy
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 1
    networks:
      - mcp-network

  # Kanban MCP Server
  kanban-server:
    build:
      context: .
      dockerfile: ./servers/kanban/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 6102
      DB_TYPE: postgres
      DATABASE_URL: postgresql://mcp_user:${POSTGRES_PASSWORD:-mcp_secure_password}@postgres:5432/mcp_tools
    ports:
      - "6102:6102"
    depends_on:
      migrations:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6102/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2  # Scale Kanban service for high availability
    networks:
      - mcp-network

  # Wiki MCP Server
  wiki-server:
    build:
      context: .
      dockerfile: ./servers/wiki/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 6103
      DB_TYPE: postgres
      DATABASE_URL: postgresql://mcp_user:${POSTGRES_PASSWORD:-mcp_secure_password}@postgres:5432/mcp_tools
    ports:
      - "6103:6103"
    depends_on:
      migrations:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6103/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2  # Scale Wiki service for high availability
    networks:
      - mcp-network

  # Memory MCP Server
  memory-server:
    build:
      context: .
      dockerfile: ./servers/memory/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 6104
      DB_TYPE: postgres
      DATABASE_URL: postgresql://mcp_user:${POSTGRES_PASSWORD:-mcp_secure_password}@postgres:5432/mcp_tools
      QDRANT_URL: http://qdrant:6333
    ports:
      - "6104:6104"
    depends_on:
      migrations:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6104/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
      replicas: 2  # Scale Memory service for high availability
    networks:
      - mcp-network

  # Web Client
  web:
    build:
      context: .
      dockerfile: ./web/Dockerfile
    environment:
      NODE_ENV: production
      API_BASE_URL: http://gateway:6100
      WS_BASE_URL: ws://gateway:6100
    ports:
      - "6101:3001"
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    #restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      replicas: 2  # Scale Web client for load balancing
    networks:
      - mcp-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-tools-nginx
    ports:
      - "6120:80"
      - "6121:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - web
    #restart: unless-stopped
    networks:
      - mcp-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  mcp-network:
    driver: bridge