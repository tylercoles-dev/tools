version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mcp-tools-postgres
    environment:
      POSTGRES_DB: mcp_tools
      POSTGRES_USER: mcp_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mcp_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mcp_user -d mcp_tools"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-tools-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - mcp-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: mcp-tools-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      QDRANT__SERVICE__HTTP_PORT: 6333
      QDRANT__SERVICE__GRPC_PORT: 6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mcp-network

  # Gateway Service
  gateway:
    build:
      context: .
      target: gateway
    container_name: mcp-tools-gateway
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://mcp_user:${POSTGRES_PASSWORD:-mcp_secure_password}@postgres:5432/mcp_tools
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
      QDRANT_URL: http://qdrant:6333
      JWT_SECRET: ${JWT_SECRET:-your_jwt_secret_key_here}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # Embeddings Worker
  embeddings-worker:
    build:
      context: .
      target: embeddings-worker
    container_name: mcp-tools-embeddings-worker
    environment:
      NODE_ENV: production
      QDRANT_URL: http://qdrant:6333
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OLLAMA_BASE_URL: ${OLLAMA_BASE_URL:-http://host.docker.internal:11434}
      REDIS_URL: redis://:${REDIS_PASSWORD:-redis_secure_password}@redis:6379
    depends_on:
      redis:
        condition: service_healthy
      qdrant:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - mcp-network

  # Web Client
  web:
    build:
      context: .
      target: web
    container_name: mcp-tools-web
    environment:
      NODE_ENV: production
      API_BASE_URL: http://gateway:3000
      WS_BASE_URL: ws://gateway:3000
    ports:
      - "3001:3001"
    depends_on:
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - mcp-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mcp-tools-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - gateway
      - web
    restart: unless-stopped
    networks:
      - mcp-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  qdrant_data:
    driver: local

networks:
  mcp-network:
    driver: bridge