name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: tylercoles-dev/mcp-tools

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service:
          - name: gateway
            target: gateway
            context: .
          - name: embeddings-worker
            target: embeddings-worker
            context: .
          - name: markitdown-worker
            target: markitdown-worker
            context: .
          - name: kanban-server
            target: kanban-server
            context: .
          - name: wiki-server
            target: wiki-server
            context: .
          - name: memory-server
            target: memory-server
            context: .
          - name: web
            target: web
            context: .

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service.name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          target: ${{ matrix.service.target }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  build-compose-images:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create docker-compose.ghcr.yml
        run: |
          cat > docker-compose.ghcr.yml << 'EOF'
          version: '3.8'
          services:
            gateway:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-gateway:${GITHUB_REF_NAME:-latest}
            embeddings-worker:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-embeddings-worker:${GITHUB_REF_NAME:-latest}
            markitdown-worker:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-markitdown-worker:${GITHUB_REF_NAME:-latest}
            kanban-server:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-kanban-server:${GITHUB_REF_NAME:-latest}
            wiki-server:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-wiki-server:${GITHUB_REF_NAME:-latest}
            memory-server:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-memory-server:${GITHUB_REF_NAME:-latest}
            web:
              image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-web:${GITHUB_REF_NAME:-latest}
          EOF

      - name: Upload docker-compose.ghcr.yml as artifact
        uses: actions/upload-artifact@v3
        with:
          name: docker-compose-ghcr
          path: docker-compose.ghcr.yml

  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    permissions:
      security-events: write

    strategy:
      matrix:
        service: [gateway, embeddings-worker, markitdown-worker, kanban-server, wiki-server, memory-server, web]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'